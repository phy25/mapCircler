<!DOCTYPE html>
<html>
<head>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
	<meta charset="utf-8">
	<style type="text/css">
		html { height: 100% }
			body { height: 100%; margin: 0px; padding: 0px }
			#map_shantou { height: 100% }
	</style>

	<script type="text/javascript"
				src="https://maps.google.com/maps/api/js?sensor=false&libraries=drawing">
	</script>

	
	<script type="text/javascript" src="jquery.min.js"></script>

	<script type="text/javascript">

/*以下函数计算多边形的中心点，调用方法：Polygon.getBounds().getCenter()*/
if (!google.maps.Polygon.prototype.getBounds) {
﻿  google.maps.Polygon.prototype.getBounds = function(latLng) {

﻿  ﻿  var bounds = new google.maps.LatLngBounds();
﻿  ﻿  var paths = this.getPaths();
﻿  ﻿  var path;
﻿  ﻿  
﻿  ﻿  for (var p = 0; p < paths.getLength(); p++) {
﻿  ﻿  ﻿  path = paths.getAt(p);
﻿  ﻿  ﻿  for (var i = 0; i < path.getLength(); i++) {
﻿  ﻿  ﻿  ﻿  bounds.extend(path.getAt(i));
﻿  ﻿  ﻿  }
﻿  ﻿  }

﻿  ﻿  return bounds;
﻿  }
}

// 将html编码
function htmlEncode(str) {
	 var s = "";
	 if (str.length == 0) return "";
	 s = str.replace(/&/g, "&amp;");
	 s = s.replace(/</g, "&lt;");
	 s = s.replace(/>/g, "&gt;");  
	 s = s.replace(/\'/g, "&#39;");
	 s = s.replace(/\"/g, "&quot;");
	 return s;
}

//查找指定多边形的位置，用zIndex作为键值 
function getzIndex(jsonObj,poly){
	for (var i = 0; i < jsonObj.area.length; i++) {
		if (poly.zIndex == jsonObj.area[i].zIndex) return i;
	}
	return null; 
}


// 根据json数据，画出区域，参数index为需要画的序号，mode=true 为新建，false为重画
function drawBlockJson(index, mode){
	//var j = index;
	var indexObj = jsonObj.area[index];
	if (index >= jsonObj.area.length) return false;

	var path=[];
	for (var i =0; i < indexObj.paths.length; i++) {
		path.push(new google.maps.LatLng(indexObj.paths[i].Lat, indexObj.paths[i].Lng));
	}

	var newzIndex;
	if (mode){ newzIndex = index; }
	else {newzIndex = indexObj.zIndex;};

	indexObj.zIndex = index;    //initial zIndex,unique
	var Block = new google.maps.Polygon({
		paths: path,
		strokeColor: jsonObj.mode[indexObj.mode].strokeColor,
		strokeOpacity: jsonObj.mode[indexObj.mode].strokeOpacity,
		strokeWeight: jsonObj.mode[indexObj.mode].strokeWeight,
		fillColor: jsonObj.mode[indexObj.mode].fillColor,
		fillOpacity: jsonObj.mode[indexObj.mode].fillOpactiy,
		zIndex:newzIndex
	});
	Block.setMap(map);
	if (mode) {  Blocks.push(Block); } ;
	
	var image = 'https://chart.googleapis.com/chart?chst=d_text_outline&chld=000000|20|l|000000|_|'+ indexObj.name;
	var nameMarker = new google.maps.Marker({
		position: Block.getBounds().getCenter(),
		map: map,
		icon: image,
	});
	if (mode) { Names.push(nameMarker); };
	
 // Add a listener for the click event
	google.maps.event.addListener(Block, 'dblclick', editBlock);

}

function deleBlockJson(index){
	if (index >= jsonObj.area.length) return false;
 
	var poly=Blocks[index];
	google.maps.event.clearInstanceListeners(poly);
	poly.setMap(null);
	Blocks.splice(index,index+1);

	var marker = Names[index];
	marker.setMap(null);
	Names.splice(index,index+1);

	jsonObj.area.splice(index,index+1);
}


function addSubmit(poly){
	if (jsonObj.area.length == 0) { poly.zIndex = 0; }
	else { poly.zIndex = jsonObj.area[jsonObj.area.length-1].zIndex+1; };
	jsonObj.area.push({"mode":0,"info":$('#item_meta').val(),"name":$('#item_name').val(), "zIndex":poly.zIndex});
		
	var path = poly.getPath();
	jsonObj.area[jsonObj.area.length-1].paths=[];
	for (i=0; i < path.length; i++){
		var xy = path.getAt(i);
		jsonObj.area[jsonObj.area.length-1].paths.push({Lat:xy.lat(), Lng:xy.lng()});
	}

			// 删除画出的区域
	poly.setMap(null)
	poly = null;
			// 画出jsonObj中的区域并初始化
	drawBlockJson(jsonObj.area.length-1,true);
}

var map, jsonObj, Names, Blocks;
var infoWindow;


function initialize() {
// json data input first
		jsonObj = {
"mode":[{"strokeColor":"#FF0000", "strokeOpacity":0.8, "strokeWeight": 2, "fillColor":"#FF0000", "fillOpacity": 0.35}],

"area":[
{"paths": [{"Lat":23.355258,"Lng":116.710652},
					 {"Lat":23.352138,"Lng":116.710639},
					 {"Lat":23.352412,"Lng":116.716227},
					 {"Lat":23.355317,"Lng":116.716077}],
 "mode":0,"info":"this is first","name":"粤东信息大厦","zIndex":0},

{"paths": [{"Lat":23.3657258,"Lng":116.710652},
					 {"Lat":23.362138,"Lng":116.710639},
					 {"Lat":23.362412,"Lng":116.716227}],
 "mode":0,"info":"this is second","name":"平东街","zIndex":0}
]};

	// Construct my map
	var latlng = new google.maps.LatLng(23.352564,116.712881);  //point of Shantou information mall
	var myOptions = {
			zoom: 16,
			center: latlng,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		};
	map = new google.maps.Map(document.getElementById("map_shantou"),myOptions);

	// drawing tools on the map，draw a new poly
	var drawingManager = new google.maps.drawing.DrawingManager({
		drawingMode: null,
		drawingControl: true,
		drawingControlOptions: {
			position: google.maps.ControlPosition.TOP_LEFT,
			drawingModes: [
			google.maps.drawing.OverlayType.POLYGON
			]},
		polygonOptions:jsonObj.mode[0]
		});
	drawingManager.setMap(map);

	google.maps.event.addListener(drawingManager, 'polygoncomplete', function(poly) {
		drawingManager.setDrawingMode(null);
		poly.setEditable(true);
		var acceptWindow = new google.maps.InfoWindow({
			content: '<form id="item_add"><p><label for="item_name">名称</label> <input type="text" id="item_name" required="required" /></p><p><label for="item_meta">备注</label> <textarea id="item_meta" style="height:50px;width:250px;"></textarea></p><p><input type="submit" value="确定" id="item_acceptBtn" /> <input type="button" value="放弃" id="item_cancelBtn" /></p></form>', 
			position: poly.getBounds().getCenter()
		});
		acceptWindow.open(map);

		google.maps.event.addListener(acceptWindow, 'domready', function(){
			$('#item_add').bind('submit', function(){
				addSubmit(poly);
				acceptWindow.close();
				return false;  //取消默认提交表单（此处即刷新）操作
			});

			// when cancel，simply delete on the map, nothing about the json.
			$('#item_cancelBtn').bind('click', function(){
				poly.setMap(null);
			    poly = null;
				acceptWindow.close();
				return false; // Optional
			});
		});

		google.maps.event.addListener(acceptWindow, 'closeclick', function(){
			if (jsonObj.area.length == 0) { poly.zIndex = 0; }
			else { poly.zIndex = jsonObj.area[jsonObj.area.length-1].zIndex+1; };
			jsonObj.area.push({"mode":0,"info":$('#item_meta').val(),"name":$('#item_name').val(), "zIndex":poly.zIndex});
		
			var path = poly.getPath();
			jsonObj.area[jsonObj.area.length-1].paths=[];
			for (i=0; i < path.length; i++){
				var xy = path.getAt(i);
				jsonObj.area[jsonObj.area.length-1].paths.push([xy.lat(),xy.lng()]);
			}

			// 删除画出的区域
			poly.setMap(null);
			poly = null;
			// 画出jsonObj中的区域并初始化
			drawBlockJson(jsonObj.area.length-1,true);

			acceptWindow.close();


		});


/*    $('#item_add_submit').bind('submit', function(){
			if(!$('#item_name').val()){
				alert('请输入名称。');
				return false;
			}

			// 将 图 存入 jsonObj
			if (jsonObj.area.length == 0) { poly.zIndex = 0; }
			else { poly.zIndex = jsonObj.area[jsonObj.area.length-1].zIndex+1; };
			jsonObj.area.push({"mode":0,"info":$('#item_meta').val(),"name":$('#item_name').val(), "zIndex":poly.zIndex});
		
			var path = poly.getPath();
			jsonObj.area[jsonObj.area.length-1].paths=[];
			for (i=0; i < path.length; i++){
				var xy = path.getAt(i);
				jsonObj.area[jsonObj.area.length-1].paths.push([xy.lat(),xy.lng()]);
			}

			// 删除画出的区域
			poly.setMap(null);
			poly = null;
			// 画出jsonObj中的区域并初始化
			drawBlockJson(jsonObj.area.length-1,true);

			acceptWindow.close();
			return false;
		});
*/
	});


// Construct the polygon
	// Note that we don't specify an array or arrays, but instead just
	// a simple array of LatLngs in the paths property
	Names = [];
	Blocks = [];
	for (var j = 0; j < jsonObj.area.length; j++) { 
		drawBlockJson(j,true);
	};

    // Create the DIV to hold the control and
    // call the fileControl() constructor passing
    // in this DIV.
    var fileControlDiv = document.createElement('div');
    var fileControl = new FileControl(fileControlDiv, map);

    fileControlDiv.index = 1;
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(fileControlDiv);

}




// modify the Block: set the poly editable, open info, when done, replace info or dele the poly
function editBlock(event) {
	event.stop();// 停止默认的放大行为的执行

	var poly = this;
	var jsonObjindex = getzIndex(jsonObj,poly);
	poly.setEditable(true);

	var infoPos = new google.maps.LatLng(map.getBounds().getSouthWest().lat(),map.getBounds().getNorthEast().lng());
	var addWindow = new google.maps.InfoWindow({content: '<form id="item_add"><p><label for="item_name">名称</label> <input type="text" id="item_name" required="required" value="'+htmlEncode(jsonObj.area[jsonObjindex].name)+'" /></p><p><label for="item_meta">备注</label> <textarea id="item_meta" style="height:100px;width:300px;">'+htmlEncode(jsonObj.area[jsonObjindex].info)+'</textarea></p><p><input type="submit" value="确定" id="item_add_submit" /><button id="item_delete_submit">删除区块</button></p></form>', position: poly.getBounds().getCenter()});
	
	addWindow.open(map);
	
	// cancel editing
	google.maps.event.addListener(addWindow, 'closeclick', function(){

		if(!$('#item_name').val()){
			alert('请输入名称。');
			return false;
		}
		
		// 删除jsonObj中的原数据，写入 jsonObj，删除被修改的区域，重画区域
		
		// 将 图 存入 jsonObj
		if (jsonObj.area.length == 0) { poly.zIndex = 0; }
		else { poly.zIndex = jsonObj.area[jsonObj.area.length-1].zIndex+1; };
		jsonObj.area.push({"mode":0,"info":$('#item_meta').val(),"name":$('#item_name').val(), "zIndex":poly.zIndex});
		
		var path = poly.getPath();
		jsonObj.area[jsonObj.area.length-1].paths=[];
		for (i=0; i < path.length; i++){
			var xy = path.getAt(i);
			jsonObj.area[jsonObj.area.length-1].paths.push([xy.lat(),xy.lng()]);
		}

		// 删除指定的原图和数据
		deleBlockJson(jsonObjindex);

		// 画出新的区域
		drawBlockJson(jsonObj.area.length-1,true);


//    poly.setMap(null);
//    poly = null;
		
		addWindow.close();

//    drawBlockJson(jsonObjindex,false);
//    return false;
	});
	
	// confirm editing
//  google.maps.event.addDomListener(submit, 'click',function(){
//    return;
//  })

	$('#item_add_submit').bind('submit', function(){//modified
		if(!$('#item_name').val()){
			alert('请输入名称。');
			return false;
		}
		
		poly.setEditable(false); 
		// 删除jsonObj中的原数据，写入 jsonObj，删除被修改的区域，重画区域
		
		// 将 图 存入 jsonObj
		if (jsonObj.area.length == 0) { poly.zIndex = 0; }
		else { poly.zIndex = jsonObj.area[jsonObj.area.length-1].zIndex+1; };
		jsonObj.area.push({"mode":0,"info":$('#item_meta').val(),"name":$('#item_name').val(), "zIndex":poly.zIndex});
		
		var path = poly.getPaths();
		for (i=0; i<poly.paths.length; i++){
			jsonObj.area[jsonObj.area.length-1].paths.push(poly.paths[i].getAt());
		}
		// 删除指定的原图
		deleBlockJson(jsonObjindex);

		// 画出新的区域
		drawBlockJson(jsonObj.area.length-1,true);


		jsonObj.area[jsonObjindex].path = poly.path;
		jsonObj.area[jsonObjindex].mode = 0;
		jsonObj.area[jsonObjindex].info = $('#item_meta').val();
		var Block = Blocks[jsonObjindex];
		Block = null;
		Blocks[jsonObjindex] = poly;

		if (jsonObj.area[jsonObjindex].name != $('#item_name').val()) {
			jsonObj.area[jsonObjindex].name = $('#item_name').val();
			Names[jsonObjindex].setMap(null);
			var image = 'https://chart.googleapis.com/chart?chst=d_text_outline&chld=000000|20|l|000000|_|'+$('#item_name').val();
			var nameMarker = new google.maps.Marker({
				position: poly.getBounds().getCenter(),
				map: map,
				icon: image
			});
			Names[jsonObjindex] = nameMarker;
		};
		addWindow.close();
		return false;
	});

	$('#item_delete_submit').bind('click', function() {
		poly.setMap(null);
		poly = null;
		Blocks.splice(jsonObjindex,jsonObjindex+1);

		jsonObj.area.splice(jsonObjindex,jsonObjindex+1);

		Names[jsonObjindex].setMap(null);
		var nameMarker = Names[jsonObjindex];
		nameMarker = null;
		Names.splice(jsonObjindex,jsonObjindex+1);
	});

}

// add controller to load the file
// The LoadControl adds a control to the map that
// load the json file to the memory.


function FileControl(controlDiv, map) {

    // We set up a variable for this since we're addin
    // event listeners later.
    var control = this;

    // Set CSS styles for the DIV containing the control
    // Setting padding to 5 px will offset the control
    // from the edge of the map
    controlDiv.style.padding = '5px';

    // Set CSS for the control border
    var loadFileUI = document.createElement('div');
    loadFileUI.style.backgroundColor = 'white';
    loadFileUI.style.borderStyle = 'solid';
    loadFileUI.style.borderWidth = '2px';
    loadFileUI.style.cursor = 'pointer';
    loadFileUI.style.textAlign = 'center';
    loadFileUI.title = 'Click to load the json file';
    controlDiv.appendChild(loadFileUI);

    // Set CSS for the control interior
    var loadFileText = document.createElement('div');
    loadFileText.style.fontFamily = 'Arial,sans-serif';
    loadFileText.style.fontSize = '12px';
    loadFileText.style.paddingLeft = '4px';
    loadFileText.style.paddingRight = '4px';
    loadFileText.innerHTML = '<b>Load Json</b>';
    loadFileUI.appendChild(loadFileText);

    // Set CSS for the save control border
    var saveFileUI = document.createElement('div');
    saveFileUI.style.backgroundColor = 'white';
    saveFileUI.style.borderStyle = 'solid';
    saveFileUI.style.borderWidth = '2px';
    saveFileUI.style.cursor = 'pointer';
    saveFileUI.style.textAlign = 'center';
    saveFileUI.title = 'Click to save the json file to disk';
    controlDiv.appendChild(saveFileUI);

    // Set CSS for the control interior
    var saveFileText = document.createElement('div');
    saveFileText.style.fontFamily = 'Arial,sans-serif';
    saveFileText.style.fontSize = '12px';
    saveFileText.style.paddingLeft = '4px';
    saveFileText.style.paddingRight = '4px';
    saveFileText.innerHTML = '<b>Save Json</b>';
    saveFileUI.appendChild(saveFileText);

    // Setup the click event listener for Home:
    // simply set the map to the control's current home property.
    google.maps.event.addDomListener(loadFileUI, 'click', function() {
        alert('load files');
        return false;
    });

    // Setup the click event listener for Set Home:
    // Set the control's home to the current Map center.
    google.maps.event.addDomListener(saveFileUI, 'click', function() {
        alert('save files');
        return false;
    });
}


	</script>
</head>



<body onload="initialize()">
	<div id="map_shantou" style="width:100%; height:100%"></div>
	
</body>

</html>
