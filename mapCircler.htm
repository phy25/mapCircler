<!DOCTYPE html>
<html>
<head>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
	<meta charset="utf-8">
	<style type="text/css">
		html { height: 100% }
		body { height: 100%; margin: 0px; padding: 0px }
			
		#map_shantou { height: 100% }
			
		#info {
        	background: #fff;
        	padding: 5px;
        	font-size: 14px;
        	font-family: arial;
    	}
	</style>
	
	<script type="text/javascript"
				src="http://ditu.google.cn/maps/api/js?sensor=false&libraries=drawing">
	</script>

	<script src="js/jquery.min.js"></script>
	<script src="js/jquery.json-2.4.min.js"></script>
	<!--<script src="js/bootstrap.min.js"></script>--> 
    <script src="src/jquery.ui.position.js" type="text/javascript"></script>
    <script src="src/jquery.contextMenu.js" type="text/javascript"></script>
    
    <link href="src/jquery.contextMenu.css" rel="stylesheet" type="text/css" />

	<script type="text/javascript">

/*以下函数计算多边形的中心点，调用方法：Polygon.getBounds().getCenter()
if (!google.maps.Polygon.prototype.getBounds) {
﻿  google.maps.Polygon.prototype.getBounds = function(latLng) {

﻿  ﻿  var bounds = new google.maps.LatLngBounds();
﻿  ﻿  var paths = this.getPaths();
﻿  ﻿  var path;
﻿  ﻿  
﻿  ﻿  for (var p = 0; p < paths.getLength(); p++) {
﻿  ﻿  ﻿  path = paths.getAt(p);
﻿  ﻿  ﻿  for (var i = 0; i < path.getLength(); i++) {
﻿  ﻿  ﻿  ﻿  bounds.extend(path.getAt(i));
﻿  ﻿  ﻿  }
﻿  ﻿  }

﻿  ﻿  return bounds;
﻿  }
}
*/

function PolygonCenter (poly) {
	var x,y;

    var vertices = poly.getPath();

      // Iterate over the vertices.
    for (var i=0, x=0, y=0; i < vertices.length; i++) {
    	var xy = vertices.getAt(i);
        x = x + xy.lat();
        y = y + xy.lng();
    }		
	x = x / vertices.length;
	y = y / vertices.length;
	return new google.maps.LatLng(x, y);
}

function getRegionOrder(jsonObj,ID){
	for (var k=0; k<jsonObj.regions.length; k++){
		if (jsonObj.regions[k].ID == ID) break;
	}
	if (k == jsonObj.regions.length) {return null}
	else {return k} 
}

function regionCenter (jsonObj,regionOrder){

	var x1 = jsonObj.regions[regionOrder].paths[0].Lat;
	var y1 = jsonObj.regions[regionOrder].paths[0].Lng;
	var x2 = x1, y2 = y1;
	var x, y;
	
	for (i=0; i<jsonObj.regions[regionOrder].paths.length; i++){
		x = jsonObj.regions[regionOrder].paths[i].Lat;
		y = jsonObj.regions[regionOrder].paths[i].Lng;
		if (x < x1) {x1 = x};
		if (x > x2) {x2 = x};
		if (y < y1) {y1 = y};
		if (y > y2) {y2 = y};
	}

	return new google.maps.LatLng( (x1+x2)/2, (y1+y2)/2);
}

function regionCenter3 (jsonObj,regionOrder){
	var x1 = jsonObj.regions[regionOrder].elements[0].paths[0].Lat;
	var y1 = jsonObj.regions[regionOrder].elements[0].paths[0].Lng;
	var x2 = x1, y2 = y1;
	var x, y;
	
	for (i=0; i<jsonObj.regions[regionOrder].elements.length; i++){
		for (j = 0; j<jsonObj.regions[regionOrder].elements[i].paths.length; j++){
			x = jsonObj.regions[regionOrder].elements[i].paths[j].Lat;
			y = jsonObj.regions[regionOrder].elements[i].paths[j].Lng;
			if (x < x1) {x1 = x};
			if (x > x2) {x2 = x};
			if (y < y1) {y1 = y};
			if (y > y2) {y2 = y};
		}
	}

	return new google.maps.LatLng( (x1+x2)/2, (y1+y2)/2);
}

// 将html编码
function htmlEncode(str) {
	 var s = "";
	 if (str.length == 0) return "";
	 s = str.replace(/&/g, "&amp;");
	 s = s.replace(/</g, "&lt;");
	 s = s.replace(/>/g, "&gt;");  
	 s = s.replace(/\'/g, "&#39;");
	 s = s.replace(/\"/g, "&quot;");
	 return s;
}

//查找指定多边形的位置，用zIndex作为索引值 
function getCurrentRegionElenemtzIndex(jsonObj,regionOrder,poly){
	for (var i = 0; i < jsonObj.regions[regionOrder].elements.length; i++) {
		if (poly.zIndex == jsonObj.regions[regionOrder].elements[i].ID) return i;
	}
	return null; 
}


// mode=true 为新建整个单元，
//  在指定的map上根据json数据画出指定区域regionOrder的指定单元index，jsonObj中的zIndex已经初始化
//  需要维护Blocks和Names两个数组。
// mode = false 为重画单元，将重画的内容替换Blocks和Names中的数据
// 最后全部加入双击响应程序
function drawBlockJson(map, jsonObj, regionOrder, index, mode){
	if (index >= jsonObj.regions[regionOrder].elements.length) return false;
	
	var indexObj = jsonObj.regions[regionOrder].elements[index];
	var path=[];
	for (var i =0; i < indexObj.paths.length; i++) {
		path.push(new google.maps.LatLng(indexObj.paths[i].Lat, indexObj.paths[i].Lng));
	}

	//initial zIndex,unique，新建时初始值已经初始化，不需要index填入
	var Block = new google.maps.Polygon({
		paths: path,
		strokeColor: jsonObj.mode[indexObj.mode].strokeColor,
		strokeOpacity: jsonObj.mode[indexObj.mode].strokeOpacity,
		strokeWeight: jsonObj.mode[indexObj.mode].strokeWeight,
		fillColor: jsonObj.mode[indexObj.mode].fillColor,
		fillOpacity: jsonObj.mode[indexObj.mode].fillOpactiy,
		zIndex: indexObj.ID
	});
	Block.setMap(map);
	
	// Add a listener for the click event
	google.maps.event.addListener(Block, 'dblclick', editBlock);

	var image = 'http://chart.googleapis.com/chart?chst=d_text_outline&chld=FFFFFF|15|l|000000|_|'+ indexObj.name;
	var nameMarker = new google.maps.Marker({
		position: PolygonCenter(Block),
		map: map,
		icon: image
	});

	if (mode){
		Blocks.push(Block);
		Names.push(nameMarker); 
	} else {
		Blocks.splice(index,1,Block);
		Names.splice(index,1,nameMarker);
	}; 

}

// 删除指定地图map的指定单元，需删除json、Blocks、Names中的数据，并将地图上单元和相关程序删除。
function deleBlockJson(map, jsonObj, regionOrder, index){
	if (index >= jsonObj.regions[regionOrder].length) return false;
 
	var p=Blocks[index];
	google.maps.event.clearInstanceListeners(p);
	p.setMap(null);
	Blocks.splice(index,index+1);

	var marker = Names[index];
	marker.setMap(null);
	Names.splice(index,index+1);

	jsonObj.regions[regionOrder].elements.splice(index,index+1);
}


// 将 poly 存入json中，并重画poly：先删除poly和相关的程序，再用json数据画出。
function addSubmit(regionOrder,poly){
	// 将 图 存入 jsonObj
	var elementLength = jsonObj.regions[regionOrder].elements.length;

	jsonObj.ID++;
	poly.zIndex = jsonObj.ID;

	jsonObj.regions[regionOrder].elements.push({"mode":0,"info":$('#item_meta').val(),"name":$('#item_name').val(), "ID":jsonObj.ID});
		
	var path = poly.getPath();

	jsonObj.regions[regionOrder].elements[elementLength].paths=[];
	for (i=0; i < path.length; i++){
		var xy = path.getAt(i);
		jsonObj.regions[regionOrder].elements[elementLength].paths.push({Lat:xy.lat(), Lng:xy.lng()});
	}

	// 删除画出的区域
	poly.setMap(null)
	google.maps.event.clearInstanceListeners(poly);
	poly = null;

	// 画出jsonObj中的区域并初始化
	drawBlockJson(map, jsonObj, regionOrder,elementLength,true);

}

// 是否需要更新子区域
function checkChildID(jsonObj, oldID, regionOrder, elementIndex){
	var indexObj = jsonObj.regions[regionOrder].elements[elementIndex];
	var newID = indexObj.ID;
	
	for (i=0; i<jsonObj.regions.length; i++){
		if (jsonObj.regions[i].ID == oldID){
			jsonObj.regions[i].ID = newID;
			jsonObj.regions[i].paths = [];
			for (j=0; j<indexObj.paths.length; j++){
				jsonObj.regions[i].paths.push(indexObj.paths[j]);
			}
			break;
		}
	}
}
// 在map上画出jsonObj中某个layer的所有框架,作废
function drawFrames(map, jsonObj, layer){
	OutFrame = [];
	for (var j=0; j<jsonObj.regions.length; j++){
		
		var indexObj = jsonObj.regions[j];
		if (indexObj.layer != layer) continue;
		var path=[];
		for (var i =0; i < indexObj.paths.length; i++) {
			path.push(new google.maps.LatLng(indexObj.paths[i].Lat, indexObj.paths[i].Lng));
		}

		//initial zIndex,unique，新建时初始值已经初始化，不需要index填入
		var Block = new google.maps.Polygon({
			paths: path,
			strokeColor: jsonObj.mode[indexObj.mode].strokeColor,
			strokeOpacity: jsonObj.mode[indexObj.mode].strokeOpacity,
			strokeWeight: jsonObj.mode[indexObj.mode].strokeWeight,
			fillColor: jsonObj.mode[indexObj.mode].fillColor,
			fillOpacity: jsonObj.mode[indexObj.mode].fillOpactiy,
		});
		Block.setMap(map);
		Frames.push(Block);
	}
}
// 画指定区域，mode = true: 建立新的区域; mode = false: 重画该区域
function createRegion(map, jsonObj, regionOrder, mode){
	if (regionOrder >= jsonObj.regions.length) return false;

	if (mode) {
		Names = [];
		Blocks = [];
	}
	for (var j = 0; j < jsonObj.regions[regionOrder].elements.length; j++) { 
		//不需初始化ID，原始数据中已经有。	
		drawBlockJson(map, jsonObj, regionOrder, j, mode);
	};

// 画外框
	var indexObj = jsonObj.regions[regionOrder];
	var path=[];
	for (var i =0; i < indexObj.paths.length; i++) {
		path.push(new google.maps.LatLng(indexObj.paths[i].Lat, indexObj.paths[i].Lng));
	}
	OutFrame = new google.maps.Polygon({
		paths: path,
		strokeColor: jsonObj.mode[indexObj.mode].strokeColor,
		strokeOpacity: jsonObj.mode[indexObj.mode].strokeOpacity,
		strokeWeight: jsonObj.mode[indexObj.mode].strokeWeight,
		fillColor: jsonObj.mode[indexObj.mode].fillColor,
		fillOpacity: jsonObj.mode[indexObj.mode].fillOpactiy,
	});
	OutFrame.setMap(map);

	map.setZoom(jsonObj.zoom[jsonObj.regions[regionOrder].layer]);
}

function deleteCurrentRegion(map){
	OutFrame.setMap(null);
	for (i=0; i<Blocks.length; i++){
		var p = Blocks[i];
		google.maps.event.clearInstanceListeners(p);
		p.setMap(null);
	}
	for (i=0; i<Names.length; i++){
		Names[i].setMap(null);
	}
}

var map, jsonObj;
var OutFrame, Names, Blocks;
var currentLayer, currentRegionOrder, defaultCenter;
var editMode; // 双击时，true 可以编辑各个块，false 进入内部
var fileControlDiv;

// jsonObj 如果出错均指向开始的那组数据；361
// regions:[region1:{elements:[element1, ]}, region2, region3, ]
// 每个region区域包含多个element单元，区域的layer属性代表不同的层。
// 如layer=1是第一层，代表城市中的区，区包含多个街道；对街道细分居委，街道就是layer=2的区域，下面有多个街道。
// ID 是固定分配了，一个region的ID可以等于某个element的ID，这时这个region就是这个element的细化。ID没有0值。
	jsonObj = {"currentID":2,"ID":5,
"mode":[{"strokeColor":"#FF0000", "strokeOpacity":0.8, "strokeWeight": 2, "fillColor":"#FF0000", "fillOpacity": 0.35},
		{"strokeColor":"#FF0000", "strokeOpacity":0.8, "strokeWeight": 1, "fillColor":"#FFFFFF", "fillOpacity": 0}],
"zoom":[13,15],

"regions":[
{"layer":1, "name":"龙湖", "mode":1,"info":"this is first","ID":2,
	"paths": [{"Lat":23.366289276203684,"Lng":116.69370043902586},
			{"Lat":23.358973538724012,"Lng":116.69387974077995},
			{"Lat":23.35882802626967,"Lng":116.68959584673303},
			{"Lat":23.353966744963618,"Lng":116.69252937089539},
			{"Lat":23.351178275762003,"Lng":116.69230244033815},
			{"Lat":23.35095971453859,"Lng":116.69940167980963},
			{"Lat":23.351940999956668,"Lng":116.70566082006837},
			{"Lat":23.352412,"Lng":116.716227},
			{"Lat":23.366387667050873,"Lng":116.71590533862309}],
 "elements":[
	{"paths": [{"Lat":23.355258,"Lng":116.710652},
			{"Lat":23.352138,"Lng":116.710639},
			{"Lat":23.352412,"Lng":116.716227},
			{"Lat":23.355317,"Lng":116.716077}],
 "mode":0,"info":"this is first","name":"粤东信息大厦","ID":4},

	{"paths": [{"Lat":23.36638568042305,"Lng":116.7106734576721},
			{"Lat":23.362098602984272,"Lng":116.7106711865082},
			{"Lat":23.362018030130056,"Lng":116.71605533862294}],
 "mode":0,"info":"this is second","name":"平东街","ID":5}
]}, // elements
{"layer":0, "name":"汕头市", "mode":1,"info":"this is first","ID":1,
	"paths": [{"Lat":23.366289276203684,"Lng":116.69370043902586},
			{"Lat":23.358973538724012,"Lng":116.69387974077995},
			{"Lat":23.35882802626967,"Lng":116.68959584673303},
			{"Lat":23.353966744963618,"Lng":116.69252937089539},
			{"Lat":23.351178275762003,"Lng":116.69230244033815},
			{"Lat":23.35095971453859,"Lng":116.69940167980963},
			{"Lat":23.351940999956668,"Lng":116.70566082006837},
			{"Lat":23.352412,"Lng":116.716227},
			{"Lat":23.366387667050873,"Lng":116.71590533862309}],
 "elements":[
	{"paths": [{"Lat":23.355258,"Lng":116.710652},
			{"Lat":23.352138,"Lng":116.710639},
			{"Lat":23.352412,"Lng":116.716227},
			{"Lat":23.355317,"Lng":116.716077}],
 "mode":0,"info":"this is first","name":"粤东信息大厦","ID":2},

	{"paths": [{"Lat":23.36638568042305,"Lng":116.7106734576721},
			{"Lat":23.362098602984272,"Lng":116.7106711865082},
			{"Lat":23.362018030130056,"Lng":116.71605533862294}],
 "mode":0,"info":"this is second","name":"平东街","ID":3}
]}
] // regions
};

defaultCenter = new google.maps.LatLng(23.352564,116.712881);  //point of Shantou information mall


function initialize() {

// Construct my map
	currentRegionOrder = getRegionOrder(jsonObj, jsonObj.currentID);

	var latlng = regionCenter(jsonObj, currentRegionOrder);  //point of Shantou information mall
	var myOptions = {
			zoom: jsonObj.zoom[jsonObj.regions[currentRegionOrder].layer],
			center: latlng,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		};
	map = new google.maps.Map(document.getElementById("map_shantou"),myOptions);

// drawing tools on the map，draw a new poly
	var drawingManager = new google.maps.drawing.DrawingManager({
		drawingMode: null,
		drawingControl: true,
		drawingControlOptions: {
			position: google.maps.ControlPosition.TOP_LEFT,
			drawingModes: [
			google.maps.drawing.OverlayType.POLYGON
			]},
		polygonOptions:jsonObj.mode[0]
		});
	drawingManager.setMap(map);

	google.maps.event.addListener(drawingManager, 'polygoncomplete', function(poly) {
		drawingManager.setDrawingMode(null);
		poly.setEditable(true);

   		document.getElementById('item_name').value = '名字';
    	document.getElementById('item_meta').value = '备注';
		document.getElementById("info").style.display="";
	
		google.maps.event.addDomListenerOnce(document.getElementById('item_acceptBtn'), 'click', function (){
			if(!$('#item_name').val()){
				alert('请输入名称。');
			return false;
			};
			addSubmit(currentRegionOrder,poly);
	    	document.getElementById("info").style.display="none";
			return false;
		});

		google.maps.event.addDomListenerOnce(document.getElementById('item_cancelBtn'), 'click', function (){
			// 删除画出的区域
			poly.setMap(null);
			poly = null;
			// 关闭对话窗口
	    	document.getElementById("info").style.display="none";
			return false;
		});

		google.maps.event.addDomListenerOnce(document.getElementById('item_deleteBtn'), 'click', function (){
			// 删除画出的区域
			poly.setMap(null);
			poly = null;
			// 关闭对话窗口
	    	document.getElementById("info").style.display="none";
			return false;
		});


		$('#item_name').focus();
	});

// create interactive window
	map.controls[google.maps.ControlPosition.TOP_LEFT].push(document.getElementById('info'));

// Create the DIV to hold the control and
    // call the fileControl() constructor passing
    // in this DIV.
    fileControlDiv = document.createElement('div');
    fileControlDiv.index = 1;

    var fileControl = new FileControl(fileControlDiv, map);
    
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(fileControlDiv);

// Construct the layer
	createRegion(map, jsonObj, currentRegionOrder, true);

// 处理菜单
    $.contextMenu({ 
        selector: '#map_shantou',
        callback: function(key, options) {
            var func = {
                    'load': function(){
                        // $("#context-menu-one").contextMenu("hide");

                        alert('load!');
                    },
                    'save': function(){
                        alert('save!')
                    },
                    'enter':function(){
                        alert('enter!')
                    },
                    'return':function(){
                        alert('return!')
					},
                    'edit':function(){
                        alert('edit!')
                    },
                    'new':function(){
                        alert('new!')
                    }
                };
            return func[key] && func[key]();//if(func[key]){func();}
        },
        items: {
            "load": {name: "Load File"},
            "save": {name: "Save File"},
            "sep1": "---------",
            "enter": {name: "进入下一层"},
            "return": {name: "返回上一层"},
            "sep2": "---------",
            "edit": {name: "编辑本单元", icon: "edit"},
            "new": {name: "新建单元", icon: "add"}
        }
    });
    
    google.maps.event.addListener(map, "rightclick", function(e){
    	var ev = new jQuery.Event('contextmenu');

	    var p = mapOverlay.getProjection().fromLatLngToContainerPixel(e.latLng);

	    ev.pageX = p.x;
	    ev.pageY = p.y;
	    
	    // contextMenuEvent = e;

	    $('#map_shantou').trigger(ev, [e.latLng]);
    });
	MapOverlay.prototype = new google.maps.OverlayView();
	MapOverlay.prototype.onAdd = function() { }
	MapOverlay.prototype.onRemove = function() { }
	MapOverlay.prototype.draw = function() { }

	function MapOverlay(map) { this.setMap(map); }
	var mapOverlay = new MapOverlay(map);
}



// modify the Block: set the poly editable, open info, when done, replace info or dele the poly
function editBlock(event) {
	event.stop();// 停止默认的放大行为的执行
	var poly = this;
	var elementIndex = getCurrentRegionElenemtzIndex(jsonObj,currentRegionOrder,poly);

	if (editMode){

	poly.setEditable(true);

    
    document.getElementById('item_name').value = htmlEncode(jsonObj.regions[currentRegionOrder].elements[elementIndex].name);
    document.getElementById('item_meta').value = htmlEncode(jsonObj.regions[currentRegionOrder].elements[elementIndex].info);
	document.getElementById("info").style.display="";
	
	google.maps.event.addDomListenerOnce(document.getElementById('item_acceptBtn'), 'click', function (){
		if(!$('#item_name').val()){
			alert('请输入名称。');
			return false;
		};
		
		// 删除指定的原图
		var oldID = jsonObj.regions[currentRegionOrder].elements[elementIndex].ID;
		deleBlockJson(map, jsonObj, currentRegionOrder,elementIndex);
		// 将图存入 jsonObj,并重画
		addSubmit(currentRegionOrder,poly);
		elementIndex = jsonObj.regions[currentRegionOrder].elements.length -1;
		checkChildID(jsonObj, oldID, currentRegionOrder, elementIndex);

	    document.getElementById("info").style.display="none";

	    google.maps.event.trigger(editModeUI, 'click');

		return false;
	});
	// 删除改变的图，重画原图。
	google.maps.event.addDomListenerOnce(document.getElementById('item_cancelBtn'), 'click', function (){
		poly.setMap(null);
		google.maps.event.clearInstanceListeners(poly);
		Poly = null;

		drawBlockJson(map, jsonObj, currentRegionOrder,elementIndex,false);
	    document.getElementById("info").style.display="none";
		
		return false;
	});

	google.maps.event.addDomListenerOnce(document.getElementById('item_deleteBtn'), 'click', function (){
		deleBlockJson(map, jsonObj, currentRegionOrder,elementIndex);
	    document.getElementById("info").style.display="none";
		return false;
	});


	$('#item_name').focus();
	} else {
		var newRegionOrder = getRegionOrder(jsonObj, poly.zIndex);
		if (newRegionOrder == null) return;
		deleteCurrentRegion(map);
		currentRegionOrder = newRegionOrder;
		createRegion(map, jsonObj, currentRegionOrder, true);
	}

}


// add controller to load the file
// The LoadControl adds a control to the map that
// load the json file to the memory.


function FileControl(controlDiv, map) {

    // We set up a variable for this since we're addin
    // event listeners later.
    var control = this;

    // Set CSS styles for the DIV containing the control
    // Setting padding to 5 px will offset the control
    // from the edge of the map
    controlDiv.style.padding = '5px';

    // Set CSS for the control border
    var loadFileUI = document.createElement('div');
    loadFileUI.style.backgroundColor = 'white';
    loadFileUI.style.borderStyle = 'solid';
    loadFileUI.style.borderWidth = '2px';
    loadFileUI.style.cursor = 'pointer';
    loadFileUI.style.textAlign = 'center';
    loadFileUI.title = 'Click to load the Data file';
    controlDiv.appendChild(loadFileUI);

    // Set CSS for the control interior
    var loadFileText = document.createElement('div');
    loadFileText.style.fontFamily = 'Arial,sans-serif';
    loadFileText.style.fontSize = '12px';
    loadFileText.style.paddingLeft = '4px';
    loadFileText.style.paddingRight = '4px';
    loadFileText.innerHTML = '<b>Load Data</b>';
    loadFileUI.appendChild(loadFileText);

    // Set CSS for the save control border
    var saveFileUI = document.createElement('div');
    saveFileUI.style.backgroundColor = 'white';
    saveFileUI.style.borderStyle = 'solid';
    saveFileUI.style.borderWidth = '2px';
    saveFileUI.style.cursor = 'pointer';
    saveFileUI.style.textAlign = 'center';
    saveFileUI.title = 'Click to save the Data file to disk';
    controlDiv.appendChild(saveFileUI);

    // Set CSS for the control interior
    var saveFileText = document.createElement('div');
    saveFileText.style.fontFamily = 'Arial,sans-serif';
    saveFileText.style.fontSize = '12px';
    saveFileText.style.paddingLeft = '4px';
    saveFileText.style.paddingRight = '4px';
    saveFileText.innerHTML = '<b>Save Data</b>';
    saveFileUI.appendChild(saveFileText);

    var upperRegionUI = document.createElement('div');
    upperRegionUI.style.backgroundColor = 'white';
    upperRegionUI.style.borderStyle = 'solid';
    upperRegionUI.style.borderWidth = '2px';
    upperRegionUI.style.cursor = 'pointer';
    upperRegionUI.style.textAlign = 'center';
    upperRegionUI.title = 'Click to return to upper Region';
    controlDiv.appendChild(upperRegionUI);

    // Set CSS for the control interior
    var upperRegionText = document.createElement('div');
    upperRegionText.style.fontFamily = 'Arial,sans-serif';
    upperRegionText.style.fontSize = '12px';
    upperRegionText.style.paddingLeft = '4px';
    upperRegionText.style.paddingRight = '4px';
    upperRegionText.innerHTML = '<b>Upper Region</b>';
    upperRegionUI.appendChild(upperRegionText);
    
    editMode = false;
    var editModeUI = document.createElement('div');
    editModeUI.style.backgroundColor = 'white';
    editModeUI.style.borderStyle = 'solid';
    editModeUI.style.borderWidth = '2px';
    editModeUI.style.cursor = 'pointer';
    editModeUI.style.textAlign = 'center';
    editModeUI.title = 'Click to Enter the Blocks';
    controlDiv.appendChild(editModeUI);

    // Set CSS for the control interior
    var editModeText = document.createElement('div');
    editModeText.style.fontFamily = 'Arial,sans-serif';
    editModeText.style.fontSize = '12px';
    editModeText.style.paddingLeft = '4px';
    editModeText.style.paddingRight = '4px';
    editModeText.innerHTML = '<b>Enter Mode</b>';
    editModeUI.appendChild(editModeText);


    // Setup the click event listener for Home:
    // simply set the map to the control's current home property.
    google.maps.event.addDomListener(loadFileUI, 'click', function() {
        var jsontext = prompt('Paste the JSON here');
        if(jsontext){
        	var obj = $.evalJSON(jsontext);
			console.log(obj);
// do sth...
			initialize();
        }
        return false;
    });

    // Setup the click event listener for Set Home:
    // Set the control's home to the current Map center.
    google.maps.event.addDomListener(saveFileUI, 'click', function() {
        prompt('Output', $.toJSON(jsonObj));
		// JSONArray arr = new JSONArray(str);alert('save files');
	    //var filename = "d:\login.log";
        return false;
    });


    google.maps.event.addDomListener(upperRegionUI, 'click', function() {
    	var newlayer = jsonObj.regions[currentRegionOrder].layer;
    	var ID = jsonObj.regions[currentRegionOrder].ID;
    	var newRegionOrder = null;

    	if (newlayer == 0) return;
    	for (j=0,newlayer--;  j < jsonObj.regions.length; j++){
    		if (jsonObj.regions[j].layer != newlayer) continue;
    		for (i=0; i < jsonObj.regions[j].elements.length; i++){
    			if (jsonObj.regions[j].elements[i].ID == ID) {
    				newRegionOrder = j;
    				break;
    			}
    		}
    	}
 
 		if (newRegionOrder == null) return;
		deleteCurrentRegion(map);
		currentRegionOrder = newRegionOrder;
		createRegion(map, jsonObj, currentRegionOrder, true);
        return false;
    });

    google.maps.event.addDomListener(editModeUI, 'click', function() {
 		if (editMode){
    		editMode = false;
    		editModeUI.style.backgroundColor = 'white';
    		editModeUI.title = 'Click to Enter the Blocks';
    		editModeText.innerHTML = '<b>Enter Mode</b>';
    	} else{
     		editMode = true;
    		editModeUI.style.backgroundColor = 'grey'; 
    		editModeUI.title = 'Click to Edit the Blocks';  
    		editModeText.innerHTML = '<b>Edit Mode</b>';		
    	}

        return false;
    });


}
	</script>
</head>



<body onload="initialize()">
	<div id="map_shantou" style="width:100%; height:100%"></div>
    <div id="info" style="display:none; ">
      <p> 名称: <input type="text" id="item_name" style="width:200px;"> </p>
      <p> 备注: <input type="text" id="item_meta" style="height:80px;width:200px;"> </p>
      <p> <input type="button" value="确定" id="item_acceptBtn" /> <input type="button" value="删除" id="item_deleteBtn" /> <input type="button" value="放弃" id="item_cancelBtn" /> </p>
    </div>
</body>

</html>
